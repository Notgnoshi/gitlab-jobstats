#!/usr/bin/env python3
"""Calculate and plot statistics for job data generated by jobstats.py."""
import argparse
import collections
import csv
import fnmatch
import logging
import operator
import sys
from typing import Dict, List


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="Set the logging output level. Defaults to INFO.",
    )
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        help="Input CSV from jobstats.py",
    )
    parser.add_argument(
        "--jobs",
        "-j",
        nargs="*",
        default="*",
        help="Job name globs to include. May be given multiple times",
    )
    # TODO: Should there be an --exclude glob?
    parser.add_argument(
        "--plot",
        "-p",
        action="store_true",
        help="Generate a timeseries plot. Requires matplotlib+seaborn",
    )

    return parser.parse_args()


def main(args):
    jobs = csv.DictReader(args.input)
    jobs = (j for j in jobs if any(fnmatch.fnmatchcase(j["name"], pat) for pat in args.jobs))
    jobs = list(jobs)

    summarize(jobs)
    most_common_failures(jobs)


def summarize(jobs: List[Dict]):
    """Calculate a basic summary."""
    total = len(jobs)
    num_success = sum(1 for j in jobs if j["status"] == "success")
    percent_success = (num_success / total) * 100
    num_failed = sum(1 for j in jobs if j["status"] == "failed")
    percent_failed = (num_failed / total) * 100

    print(f"total jobs:  {total}")
    print(f"    success:  {num_success} ({percent_success:.2f}%)")
    print(f"    failure:  {num_failed} ({percent_failed:.2f}%)")


def most_common_failures(jobs: List[Dict]):
    """Determine the job(s) that fail the most frequently."""
    failed_jobs = (j for j in jobs if j["status"] == "failed")
    failed_job_names = (j["name"] for j in failed_jobs)
    counter = collections.Counter(failed_job_names)

    most_common = counter.most_common()
    most_common.sort(key=operator.itemgetter(1), reverse=True)
    if len(most_common) < 2:
        return

    print("job breakdown:")
    for job, num_failures in most_common:
        print(f"    failures: {num_failures} job: {job}")


if __name__ == "__main__":
    args = parse_args()
    fmt = "%(asctime)s %(module)s %(levelname)s: %(message)s"
    logging.basicConfig(
        format=fmt,
        datefmt="%Y-%m-%dT%H:%M:%S%z",
        level=args.log_level,
        stream=sys.stderr,
    )
    # Color log output if possible, because I'm a sucker
    try:
        import coloredlogs

        coloredlogs.install(fmt=fmt, level=args.log_level, datefmt="%Y-%m-%dT%H:%M:%S%z")
    except ImportError:
        pass
    main(args)
