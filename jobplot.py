#!/usr/bin/env python3
"""Calculate and plot statistics for job data generated by jobstats.py."""
import argparse
import csv
import fnmatch
import logging
import sys


def parse_args():
    parser = argparse.ArgumentParser(
        description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        "--log-level",
        "-l",
        type=str,
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"],
        help="Set the logging output level. Defaults to INFO.",
    )
    parser.add_argument(
        "input",
        type=argparse.FileType("r"),
        help="Input CSV from jobstats.py",
    )
    parser.add_argument(
        "--jobs",
        "-j",
        nargs="*",
        default="*",
        help="Job name globs to include. May be given multiple times",
    )
    # TODO: Should there be an --exclude glob?
    parser.add_argument(
        "--plot",
        "-p",
        action="store_true",
        help="Generate a timeseries plot. Requires matplotlib+seaborn",
    )

    return parser.parse_args()


def main(args):
    jobs = csv.DictReader(args.input)
    jobs = (j for j in jobs if any(fnmatch.fnmatchcase(j["name"], pat) for pat in args.jobs))
    jobs = list(jobs)
    logging.debug("Read %d jobs", len(jobs))


if __name__ == "__main__":
    args = parse_args()
    fmt = "%(asctime)s %(module)s %(levelname)s: %(message)s"
    logging.basicConfig(
        format=fmt,
        datefmt="%Y-%m-%dT%H:%M:%S%z",
        level=args.log_level,
        stream=sys.stderr,
    )
    # Color log output if possible, because I'm a sucker
    try:
        import coloredlogs

        coloredlogs.install(fmt=fmt, level=args.log_level, datefmt="%Y-%m-%dT%H:%M:%S%z")
    except ImportError:
        pass
    main(args)
